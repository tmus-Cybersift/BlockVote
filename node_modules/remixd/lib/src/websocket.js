"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var WS = require("ws");
var http = require("http");
var buildWebsocketClient = require('@remixproject/plugin-ws').buildWebsocketClient;
var WebSocket = /** @class */ (function () {
    function WebSocket(port, opt, sharedFolder) {
        this.port = port;
        this.opt = opt;
        this.sharedFolder = sharedFolder;
    }
    WebSocket.prototype.start = function (callback) {
        var _this = this;
        this.server = http.createServer(function (request, response) {
            console.log((new Date()) + ' Received request for ' + request.url);
            response.writeHead(404);
            response.end();
        });
        var loopback = '127.0.0.1';
        this.server.listen(this.port, loopback, function () {
            console.log((new Date()) + ' Remixd is listening on ' + loopback + ':65520');
        });
        this.wsServer = new WS.Server({
            server: this.server,
            verifyClient: function (info, done) {
                if (!originIsAllowed(info.origin, _this)) {
                    done(false);
                    console.log((new Date()) + ' Connection from origin ' + info.origin + ' rejected.');
                    return;
                }
                done(true);
            }
        });
        this.wsServer.on('connection', function (ws) {
            var sharedFolder = _this.sharedFolder;
            _this.connection = ws;
            buildWebsocketClient(ws, sharedFolder);
            if (callback)
                callback(ws);
        });
    };
    WebSocket.prototype.close = function () {
        var _this = this;
        if (this.wsServer) {
            this.wsServer.close(function () {
                _this.server.close();
            });
        }
    };
    return WebSocket;
}());
exports.default = WebSocket;
function originIsAllowed(origin, self) {
    return origin === self.opt.remixIdeUrl;
}
